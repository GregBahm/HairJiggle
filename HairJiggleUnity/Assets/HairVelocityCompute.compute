#pragma kernel VelocityCompute

StructuredBuffer<float3> _HairMeshPoints;
RWStructuredBuffer<float3> _HairVelocity;
RWStructuredBuffer<float3> _HairPosition;

//float4x4 _LastHeadBone;
float4x4 _HeadBone;

float _Gain;
float _Decay;

[numthreads(128,1,1)]
void VelocityCompute(uint3 id : SV_DispatchThreadID)
{
	uint index = id.x;

	float4 hairMeshPoint = float4(_HairMeshPoints[index], 1);
	float3 targetHairPoint = mul(_HeadBone, hairMeshPoint);

	float3 currentPos = _HairPosition[index];
	float3 velocity = _HairVelocity[index];


	//float3 lastHairPoint = mul(_LastHeadBone, hairMeshPoint) + momentum;
	//float3 currentHairPoint = baseHairPoint + momentum;

	float3 delta = targetHairPoint - currentPos;

	velocity += delta * _Gain;
	velocity *= _Decay;
	
	currentPos += velocity;

	currentPos = lerp(targetHairPoint, currentPos, _Decay);

	_HairVelocity[index] = velocity;
	_HairPosition[index] = currentPos;
}
 